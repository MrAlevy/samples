/**
 * Do not insert new methods for the Strapi API directly
 * into this file. Use its child class in strapi.api.ts.
 * This file is used for automatic injecting of properties
 * and is loaded into RAM as a string during the operation.
 */

import { RESTDataSource } from 'apollo-datasource-rest'
import DataLoader from 'dataloader'
import { components as Components } from '../generated/strapiSchema'
import {
  PathsMapping,
  PathsMapping2,
  pathsMapping,
} from '../generated/strapiMappings'

type StrapiModels = Components['schemas']

export class StrapiAPIParent extends RESTDataSource {
  loader: {
    [key: string]: {
      ids: DataLoader<string, any | null>
      emails: DataLoader<string, any | null>
    }
  } = {}

  constructor() {
    super()

    /**
     * Generated properties for each Strapi model
     * Do not insert properties in zone below manually
     * ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ — Do not remove the comment below! ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —
     */
    //<auto-generated DataLoader objects start>
    this.loader = {
      'Access-group': {
        ids: this.dataLoader<StrapiModels['Access-group']>(
          '/access-groups',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Access-group']>(
          '/access-groups',
          'emails'
        ),
      },
      Achievement: {
        ids: this.dataLoader<StrapiModels['Achievement']>(
          '/achievements',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Achievement']>(
          '/achievements',
          'emails'
        ),
      },
      'Achievement-approvers': {
        ids: this.dataLoader<StrapiModels['Achievement-approvers']>(
          '/achievement-approvers',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Achievement-approvers']>(
          '/achievement-approvers',
          'emails'
        ),
      },
      Archive: {
        ids: this.dataLoader<StrapiModels['Archive']>('/archives', 'ids'),
        emails: this.dataLoader<StrapiModels['Archive']>('/archives', 'emails'),
      },
      Book: {
        ids: this.dataLoader<StrapiModels['Book']>('/books', 'ids'),
        emails: this.dataLoader<StrapiModels['Book']>('/books', 'emails'),
      },
      Bookmark: {
        ids: this.dataLoader<StrapiModels['Bookmark']>('/bookmarks', 'ids'),
        emails: this.dataLoader<StrapiModels['Bookmark']>(
          '/bookmarks',
          'emails'
        ),
      },
      'Curriculum-vitae': {
        ids: this.dataLoader<StrapiModels['Curriculum-vitae']>(
          '/curriculum-vitaes',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Curriculum-vitae']>(
          '/curriculum-vitaes',
          'emails'
        ),
      },
      Day: {
        ids: this.dataLoader<StrapiModels['Day']>('/days', 'ids'),
        emails: this.dataLoader<StrapiModels['Day']>('/days', 'emails'),
      },
      'Day-booking': {
        ids: this.dataLoader<StrapiModels['Day-booking']>(
          '/day-bookings',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Day-booking']>(
          '/day-bookings',
          'emails'
        ),
      },
      'Development-plan': {
        ids: this.dataLoader<StrapiModels['Development-plan']>(
          '/development-plans',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Development-plan']>(
          '/development-plans',
          'emails'
        ),
      },
      Devrel: {
        ids: this.dataLoader<StrapiModels['Devrel']>('/devrels', 'ids'),
        emails: this.dataLoader<StrapiModels['Devrel']>('/devrels', 'emails'),
      },
      Employee: {
        ids: this.dataLoader<StrapiModels['Employee']>('/employees', 'ids'),
        emails: this.dataLoader<StrapiModels['Employee']>(
          '/employees',
          'emails'
        ),
      },
      'Employee-achievement': {
        ids: this.dataLoader<StrapiModels['Employee-achievement']>(
          '/employee-achievements',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Employee-achievement']>(
          '/employee-achievements',
          'emails'
        ),
      },
      'Employee-matrix': {
        ids: this.dataLoader<StrapiModels['Employee-matrix']>(
          '/employee-matrices',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Employee-matrix']>(
          '/employee-matrices',
          'emails'
        ),
      },
      'Employee-project': {
        ids: this.dataLoader<StrapiModels['Employee-project']>(
          '/employee-projects',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Employee-project']>(
          '/employee-projects',
          'emails'
        ),
      },
      'Employee-reviewer': {
        ids: this.dataLoader<StrapiModels['Employee-reviewer']>(
          '/employee-reviewers',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Employee-reviewer']>(
          '/employee-reviewers',
          'emails'
        ),
      },
      Evaluation: {
        ids: this.dataLoader<StrapiModels['Evaluation']>('/evaluations', 'ids'),
        emails: this.dataLoader<StrapiModels['Evaluation']>(
          '/evaluations',
          'emails'
        ),
      },
      'Evaluation-attribute': {
        ids: this.dataLoader<StrapiModels['Evaluation-attribute']>(
          '/evaluation-attributes',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Evaluation-attribute']>(
          '/evaluation-attributes',
          'emails'
        ),
      },
      'Evaluation-comment': {
        ids: this.dataLoader<StrapiModels['Evaluation-comment']>(
          '/evaluation-comments',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Evaluation-comment']>(
          '/evaluation-comments',
          'emails'
        ),
      },
      Event: {
        ids: this.dataLoader<StrapiModels['Event']>('/events', 'ids'),
        emails: this.dataLoader<StrapiModels['Event']>('/events', 'emails'),
      },
      Experience: {
        ids: this.dataLoader<StrapiModels['Experience']>('/experiences', 'ids'),
        emails: this.dataLoader<StrapiModels['Experience']>(
          '/experiences',
          'emails'
        ),
      },
      Favorites: {
        ids: this.dataLoader<StrapiModels['Favorites']>('/favorites', 'ids'),
        emails: this.dataLoader<StrapiModels['Favorites']>(
          '/favorites',
          'emails'
        ),
      },
      Feedback: {
        ids: this.dataLoader<StrapiModels['Feedback']>('/feedbacks', 'ids'),
        emails: this.dataLoader<StrapiModels['Feedback']>(
          '/feedbacks',
          'emails'
        ),
      },
      'Feedback-comment': {
        ids: this.dataLoader<StrapiModels['Feedback-comment']>(
          '/feedback-comments',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Feedback-comment']>(
          '/feedback-comments',
          'emails'
        ),
      },
      'File-detail': {
        ids: this.dataLoader<StrapiModels['File-detail']>(
          '/file-details',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['File-detail']>(
          '/file-details',
          'emails'
        ),
      },
      Guild: {
        ids: this.dataLoader<StrapiModels['Guild']>('/guilds', 'ids'),
        emails: this.dataLoader<StrapiModels['Guild']>('/guilds', 'emails'),
      },
      Hobby: {
        ids: this.dataLoader<StrapiModels['Hobby']>('/hobbies', 'ids'),
        emails: this.dataLoader<StrapiModels['Hobby']>('/hobbies', 'emails'),
      },
      'Hobby-post': {
        ids: this.dataLoader<StrapiModels['Hobby-post']>('/hobby-posts', 'ids'),
        emails: this.dataLoader<StrapiModels['Hobby-post']>(
          '/hobby-posts',
          'emails'
        ),
      },
      'Hobby-post-comment': {
        ids: this.dataLoader<StrapiModels['Hobby-post-comment']>(
          '/hobby-post-comments',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Hobby-post-comment']>(
          '/hobby-post-comments',
          'emails'
        ),
      },
      Leaderboard: {
        ids: this.dataLoader<StrapiModels['Leaderboard']>(
          '/leaderboard',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Leaderboard']>(
          '/leaderboard',
          'emails'
        ),
      },
      Learned: {
        ids: this.dataLoader<StrapiModels['Learned']>('/learneds', 'ids'),
        emails: this.dataLoader<StrapiModels['Learned']>('/learneds', 'emails'),
      },
      Like: {
        ids: this.dataLoader<StrapiModels['Like']>('/likes', 'ids'),
        emails: this.dataLoader<StrapiModels['Like']>('/likes', 'emails'),
      },
      Log: {
        ids: this.dataLoader<StrapiModels['Log']>('/logs', 'ids'),
        emails: this.dataLoader<StrapiModels['Log']>('/logs', 'emails'),
      },
      Matrix: {
        ids: this.dataLoader<StrapiModels['Matrix']>('/matrices', 'ids'),
        emails: this.dataLoader<StrapiModels['Matrix']>('/matrices', 'emails'),
      },
      'Matrix-proposal': {
        ids: this.dataLoader<StrapiModels['Matrix-proposal']>(
          '/matrix-proposals',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Matrix-proposal']>(
          '/matrix-proposals',
          'emails'
        ),
      },
      Notification: {
        ids: this.dataLoader<StrapiModels['Notification']>(
          '/notifications',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Notification']>(
          '/notifications',
          'emails'
        ),
      },
      'Onboarding-ticket': {
        ids: this.dataLoader<StrapiModels['Onboarding-ticket']>(
          '/onboarding-tickets',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Onboarding-ticket']>(
          '/onboarding-tickets',
          'emails'
        ),
      },
      'One-to-one-notifications-queue': {
        ids: this.dataLoader<StrapiModels['One-to-one-notifications-queue']>(
          '/one-to-one-notifications-queues',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['One-to-one-notifications-queue']>(
          '/one-to-one-notifications-queues',
          'emails'
        ),
      },
      Post: {
        ids: this.dataLoader<StrapiModels['Post']>('/posts', 'ids'),
        emails: this.dataLoader<StrapiModels['Post']>('/posts', 'emails'),
      },
      'Powerbi-report': {
        ids: this.dataLoader<StrapiModels['Powerbi-report']>(
          '/powerbi-reports',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Powerbi-report']>(
          '/powerbi-reports',
          'emails'
        ),
      },
      Process: {
        ids: this.dataLoader<StrapiModels['Process']>('/processes', 'ids'),
        emails: this.dataLoader<StrapiModels['Process']>(
          '/processes',
          'emails'
        ),
      },
      'Process-execution': {
        ids: this.dataLoader<StrapiModels['Process-execution']>(
          '/process-executions',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Process-execution']>(
          '/process-executions',
          'emails'
        ),
      },
      'Process-execution-step': {
        ids: this.dataLoader<StrapiModels['Process-execution-step']>(
          '/process-execution-steps',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Process-execution-step']>(
          '/process-execution-steps',
          'emails'
        ),
      },
      'Process-step': {
        ids: this.dataLoader<StrapiModels['Process-step']>(
          '/process-steps',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Process-step']>(
          '/process-steps',
          'emails'
        ),
      },
      Project: {
        ids: this.dataLoader<StrapiModels['Project']>('/projects', 'ids'),
        emails: this.dataLoader<StrapiModels['Project']>('/projects', 'emails'),
      },
      Skill: {
        ids: this.dataLoader<StrapiModels['Skill']>('/skills', 'ids'),
        emails: this.dataLoader<StrapiModels['Skill']>('/skills', 'emails'),
      },
      Tag: {
        ids: this.dataLoader<StrapiModels['Tag']>('/tags', 'ids'),
        emails: this.dataLoader<StrapiModels['Tag']>('/tags', 'emails'),
      },
      Vacancy: {
        ids: this.dataLoader<StrapiModels['Vacancy']>('/vacancies', 'ids'),
        emails: this.dataLoader<StrapiModels['Vacancy']>(
          '/vacancies',
          'emails'
        ),
      },
      'Weekly-report': {
        ids: this.dataLoader<StrapiModels['Weekly-report']>(
          '/weekly-reports',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Weekly-report']>(
          '/weekly-reports',
          'emails'
        ),
      },
      'Weekly-report-dates': {
        ids: this.dataLoader<StrapiModels['Weekly-report-dates']>(
          '/weekly-report-dates',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Weekly-report-dates']>(
          '/weekly-report-dates',
          'emails'
        ),
      },
      'Wiki-page': {
        ids: this.dataLoader<StrapiModels['Wiki-page']>('/wiki-pages', 'ids'),
        emails: this.dataLoader<StrapiModels['Wiki-page']>(
          '/wiki-pages',
          'emails'
        ),
      },
      Workplace: {
        ids: this.dataLoader<StrapiModels['Workplace']>('/workplaces', 'ids'),
        emails: this.dataLoader<StrapiModels['Workplace']>(
          '/workplaces',
          'emails'
        ),
      },
      'Workplace-booking': {
        ids: this.dataLoader<StrapiModels['Workplace-booking']>(
          '/workplace-bookings',
          'ids'
        ),
        emails: this.dataLoader<StrapiModels['Workplace-booking']>(
          '/workplace-bookings',
          'emails'
        ),
      },
      Workspace: {
        ids: this.dataLoader<StrapiModels['Workspace']>('/workspaces', 'ids'),
        emails: this.dataLoader<StrapiModels['Workspace']>(
          '/workspaces',
          'emails'
        ),
      },
    }
    //<auto-generated DataLoader objects end>
    /**
     * ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ • Do not remove the comment above! ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •
     * Generated properties for each Strapi model
     */
  }

  private query<T extends keyof (StrapiModels | PathsMapping | PathsMapping2)>(
    collection: T
  ) {
    type Model = StrapiModels[T] & { createdAt: string; updatedAt: string }
    type ParamsValT = string | number | boolean
    type ParamsT<T1> = Omit<
      PathsMapping[T]['get']['parameters']['query'],
      '=' | '_in' | '_nin'
    > & {
      _eq?: T1
      _in?: ParamsValT | ParamsValT[]
      _nin?: ParamsValT | ParamsValT[]
    }
    type ParentOrString<T> = T extends string
      ? T
      : T extends number
      ? T
      : T extends boolean
      ? T
      : T extends undefined
      ? T
      : T extends Function
      ? T
      : string | Partial<T>
    type Params = Partial<{
      [P in keyof Model]:
        | ParentOrString<Model[P]>
        | ParamsT<ParentOrString<Model[P]>>
    }>
    type ResponseParams = {
      _sort?: { field: keyof Model; order?: 'ASC' | 'DESC' }[]
      _limit?: number
      _start?: number
    }
    //@ts-ignore
    type BodyPost = PathsMapping[T]['post']['requestBody']['application/json']
    type BodyPut = Partial<
      PathsMapping2[T]['put']['requestBody']['application/json']
    > & {
      id: string
    }

    const path = pathsMapping[collection]

    return {
      getSingle: async (paramsOrIdOrEmail: Params | string): Promise<Model> => {
        if (typeof paramsOrIdOrEmail === 'string') {
          return paramsOrIdOrEmail.includes('@')
            ? this.loader[collection].emails.load(paramsOrIdOrEmail)
            : this.loader[collection].ids.load(paramsOrIdOrEmail)
        } else {
          return (
            await this.get(`/${path}?${paramsString(paramsOrIdOrEmail)}`)
          )[0]
        }
      },
      getMany: async (
        paramsOrIdsOrEmails?: Params | string[],
        responseParams?: ResponseParams
      ): Promise<Model[]> => {
        if (Array.isArray(paramsOrIdsOrEmails)) {
          const idsAndEmails = paramsOrIdsOrEmails.reduce(
            (acc: { [key: string]: string[] }, curr: string) => {
              const key = curr.includes('@') ? 'emails' : 'ids'
              acc[key] = acc[key].concat([curr])
              return acc
            },
            { ids: [], emails: [] }
          )

          const idsResults = idsAndEmails.ids.length
            ? this.loader[collection].ids.loadMany(idsAndEmails.ids)
            : []
          const emailsResults = idsAndEmails.emails.length
            ? this.loader[collection].emails.loadMany(idsAndEmails.emails)
            : []

          const values = await Promise.all([idsResults, emailsResults])
          const result = values[0].concat(values[1])
          return result.filter(e => e)
        } else {
          return this.get(
            paramsOrIdsOrEmails
              ? `/${path}?${paramsString(
                  paramsOrIdsOrEmails
                )}${responseParamsString(responseParams)}`
              : `/${path}`
          )
        }
      },
      getCount: (params?: Params) =>
        this.get<Number>(
          params ? `/${path}/count?${paramsString(params)}` : `/${path}/count`
        ),
      //@ts-ignore
      create: (body: BodyPost) => this.post<Model>(`/${path}`, body),
      update: ({ id, ...body }: BodyPut & { id: string }) =>
        this.put<Model>(`/${path}/${id}`, body),
      delete: (id: string) => this.delete<Model>(`/${path}/${id}`),
    }
  }

  dataLoader<T>(
    path: string,
    keys: 'ids' | 'emails'
  ): DataLoader<string, T | null> {
    return new DataLoader(
      async idsOrEmails => {
        const args = idsOrEmails.map(id =>
          keys === 'emails' ? 'email_contains=' + id : '_id_in=' + id
        )
        const results = await this.get<
          Promise<(T & { id: string; email?: string })[]>
        >(`/${path}/?${args.join('&')}`)
        return idsOrEmails.map(
          key =>
            results.find(e =>
              keys === 'emails'
                ? e.email?.toLowerCase() === key.toLowerCase()
                : e.id === key
            ) || null
        )
      },
      { maxBatchSize: 10 }
    )
  }

  /**
   * Generated properties for each Strapi model
   * Do not insert properties in zone below manually
   * ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ — Do not remove the comment below! ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —ðŸ —
   */
  //<auto-generated properties start>
  _accessGroup = () => this.query('Access-group')
  _achievement = () => this.query('Achievement')
  _achievementApprovers = () => this.query('Achievement-approvers')
  _archive = () => this.query('Archive')
  _book = () => this.query('Book')
  _bookmark = () => this.query('Bookmark')
  _curriculumVitae = () => this.query('Curriculum-vitae')
  _day = () => this.query('Day')
  _dayBooking = () => this.query('Day-booking')
  _developmentPlan = () => this.query('Development-plan')
  _devrel = () => this.query('Devrel')
  _employee = () => this.query('Employee')
  _employeeAchievement = () => this.query('Employee-achievement')
  _employeeMatrix = () => this.query('Employee-matrix')
  _employeeProject = () => this.query('Employee-project')
  _employeeReviewer = () => this.query('Employee-reviewer')
  _evaluation = () => this.query('Evaluation')
  _evaluationAttribute = () => this.query('Evaluation-attribute')
  _evaluationComment = () => this.query('Evaluation-comment')
  _event = () => this.query('Event')
  _experience = () => this.query('Experience')
  _favorites = () => this.query('Favorites')
  _feedback = () => this.query('Feedback')
  _feedbackComment = () => this.query('Feedback-comment')
  _fileDetail = () => this.query('File-detail')
  _guild = () => this.query('Guild')
  _hobby = () => this.query('Hobby')
  _hobbyPost = () => this.query('Hobby-post')
  _hobbyPostComment = () => this.query('Hobby-post-comment')
  _leaderboard = () => this.query('Leaderboard')
  _learned = () => this.query('Learned')
  _like = () => this.query('Like')
  _log = () => this.query('Log')
  _matrix = () => this.query('Matrix')
  _matrixProposal = () => this.query('Matrix-proposal')
  _notification = () => this.query('Notification')
  _onboardingTicket = () => this.query('Onboarding-ticket')
  _oneToOneNotificationsQueue = () =>
    this.query('One-to-one-notifications-queue')
  _post = () => this.query('Post')
  _powerbiReport = () => this.query('Powerbi-report')
  _process = () => this.query('Process')
  _processExecution = () => this.query('Process-execution')
  _processExecutionStep = () => this.query('Process-execution-step')
  _processStep = () => this.query('Process-step')
  _project = () => this.query('Project')
  _skill = () => this.query('Skill')
  _tag = () => this.query('Tag')
  _vacancy = () => this.query('Vacancy')
  _weeklyReport = () => this.query('Weekly-report')
  _weeklyReportDates = () => this.query('Weekly-report-dates')
  _wikiPage = () => this.query('Wiki-page')
  _workplace = () => this.query('Workplace')
  _workplaceBooking = () => this.query('Workplace-booking')
  _workspace = () => this.query('Workspace')
  //<auto-generated properties end>
  /**
   * ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ • Do not remove the comment above! ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •ðŸ •
   * Generated properties for each Strapi model
   */
}

function paramsString(params: any) {
  return Object.keys(params)
    .flatMap(field => {
      if (typeof params[field] === 'undefined') return ''
      if (typeof params[field] !== 'object') {
        return `${field}_eq=${params[field] + ''}&`
      }
      return Object.keys(params[field]).flatMap(param => {
        if (typeof params[field][param] === 'undefined') return ''
        const url = `${
          field +
          (param in params[field] && !param.startsWith('_') ? '.' : '') +
          param
        }=`
        if (Array.isArray(params[field][param])) {
          return params[field][param].map((val: any) => url + val + '&')
        } else {
          return url + params[field][param] + '&'
        }
      })
    })
    .join('')
}

function responseParamsString(responseParams: any) {
  if (!responseParams) return ''
  return Object.keys(responseParams)
    .map(field => {
      if (Array.isArray(responseParams[field])) {
        let url = `${field}=`
        url += responseParams[field]
          .map((param: { field: string; order?: string }) => {
            return `${param.field}:${param?.order || 'ASC'}`
          })
          .join(',')
        return url
      } else {
        return `${field}=${responseParams[field]}`
      }
    })
    .join('&')
}
